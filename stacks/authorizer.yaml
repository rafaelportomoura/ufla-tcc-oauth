AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
Conditions:
    isProd: !Equals [!Ref Stage, prod]


Globals:
    Function:
        Timeout: 900
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
Resources:
    Authorizer:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../dist/handlers
            Handler: authorizer.authorizer
            VpcConfig:
                SubnetIds: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
                SecurityGroupIds:
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"}
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-send-email
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant
            Environment:
                Variables:
                    LOG_LEVEL: !Ref LogLevel
                    COGNITO_ISSUER: !Sub
                      - https://cognito-idp.${region}.amazonaws.com/${userPoolId}
                      - region: !Ref AWS::Region
                        userPoolId: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-id"}
                    COGNITO_USER_POOL: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-id"}
                    COGNITO_CLIENT_ID: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-client"}
            Tracing: PassThrough

    LambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${Authorizer}
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${Authorizer}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            Policies:
              - PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                          - dynamodb:Query
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

Outputs:
    AuthorizerArn:
        Description: Authorizer Arn
        Value: !GetAtt Authorizer.Arn
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer-arn
    AuthorizerName:
        Description: Authorizer Name
        Value: !Ref Authorizer
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer-name
    AuthorizerLogGroup:
        Description: Authorizer Log Group
        Value: !Ref LambdaLogGroup
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer-log-group
    AuthorizerRole:
        Description: Authorizer Role
        Value: !GetAtt LambdaRole.Arn
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer-role
    ApiGatewayAuthorizerUri:
        Description: Authorizer Uri
        Value: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Authorizer.Arn}/invocations
        Export:
            Name: !Sub "${Stage}-${Tenant}-api-gateway-authorizer-uri"
